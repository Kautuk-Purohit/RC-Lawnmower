#include <WiFiNINA.h>

#define MOTOR_PIN1 3
#define MOTOR_PIN2 5
#define MOTOR_PIN3 6
#define MOTOR_PIN4 9

#define CUTTER 10

char ssid[] = "mrpenney";  // Your network SSID (name)
char pass[] = "password";  // Your network password
int status = WL_IDLE_STATUS;

WiFiServer server(9090);  // Port number

// Define default joystick position
const int defaultJoystickX = 509;
const int defaultJoystickY = 530;

// Variable to track toggle state
bool joystickEnabled = true;

// Variables to track previous button state
int prevButtonState = HIGH;

void motorControl(int xValue, int yValue) {
  // Check if joystick movement is enabled
  if (!joystickEnabled) {
    // If joystick movement is disabled, stop the motors
    analogWrite(MOTOR_PIN1, 0);
    analogWrite(MOTOR_PIN2, 0);
    analogWrite(MOTOR_PIN3, 0);
    analogWrite(MOTOR_PIN4, 0);
    digitalWrite(CUTTER, HIGH);
    Serial.println("Motors Stopped (Joystick Disabled)");
    return;  // Exit the function early
  }

  // Calculate adjusted joystick values
  int adjustedXValue = defaultJoystickX - xValue;  // Reverse sign for left-right movement
  int adjustedYValue = yValue - defaultJoystickY;

  // Map joystick values to motor speeds
  int motor1Speed = adjustedYValue + adjustedXValue;
  int motor2Speed = adjustedYValue - adjustedXValue;

  // Ensure motor speeds are within the valid range (-255 to 255)
  motor1Speed = max(-255, min(255, motor1Speed));
  motor2Speed = max(-255, min(255, motor2Speed));

  // Control motors based on adjusted speeds
  analogWrite(MOTOR_PIN1, motor1Speed > 0 ? motor1Speed : 0);   // Motor 1 forward
  analogWrite(MOTOR_PIN2, motor1Speed < 0 ? -motor1Speed : 0);  // Motor 1 backward
  analogWrite(MOTOR_PIN3, motor2Speed > 0 ? motor2Speed : 0);   // Motor 2 forward
  analogWrite(MOTOR_PIN4, motor2Speed < 0 ? -motor2Speed : 0);  // Motor 2 backward

  digitalWrite(CUTTER, LOW);

  // Debug prints
  Serial.print("Motor Speed 1: ");
  Serial.print(motor1Speed);
  Serial.print(", Motor Speed 2: ");
  Serial.println(motor2Speed);
}

void setup() {
  Serial.begin(250000);

  pinMode(MOTOR_PIN1, OUTPUT);
  pinMode(MOTOR_PIN2, OUTPUT);
  pinMode(MOTOR_PIN3, OUTPUT);
  pinMode(MOTOR_PIN4, OUTPUT);

  pinMode(CUTTER, OUTPUT);

  pinMode(2, INPUT_PULLUP);  // Joystick button pin

  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    status = WiFi.begin(ssid, pass);
    delay(10000);
  }

  server.begin();
  Serial.print("Server started at ");
  Serial.println(WiFi.localIP());  // Print the IP address
}

void loop() {
  WiFiClient client = server.available();  // Listen for incoming clients

  if (client) {
    Serial.println("New client");
    String currentLine = "";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (currentLine.length() == 0) {
            break;
          } else {
            Serial.println(currentLine);
            // Parse data
            int xValue, yValue, buttonState;
            sscanf(currentLine.c_str(), "%d,%d,%d", &xValue, &yValue, &buttonState);

            // Toggle joystick movement based on button state change
            if (buttonState == LOW && prevButtonState == HIGH) {
              joystickEnabled = !joystickEnabled;  // Toggle joystick state
            }

            // Use joystick values to control motors
            motorControl(xValue, yValue);

            // Debug print joystick values and toggle state
            Serial.print("X: ");
            Serial.print(xValue);
            Serial.print(", Y: ");
            Serial.print(yValue);
            Serial.print(", Button: ");
            Serial.print(buttonState);
            Serial.print(", Joystick Enabled: ");
            Serial.println(joystickEnabled ? "Yes" : "No");

            // Update previous button state
            prevButtonState = buttonState;

            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    client.stop();
    Serial.println("Client disconnected");
  }
}
